{"ast":null,"code":"const handleVendorEmailChange = e => {\n  const email = e.target.value;\n  const emailRegex = /^\\S+@\\S+\\.\\S+$/;\n  if (emailRegex.test(email) || email === '') {\n    // Valid email address or empty string, update state\n    setFormData(prevFormData => ({\n      ...prevFormData,\n      VendorEmail: email\n    }));\n  } else {\n    // Invalid email format, you might want to provide feedback to the user\n    console.log(\"Invalid email format\");\n    // Optionally, you can clear the email field or show an error message to the user\n    // setFormData(prevFormData => ({ ...prevFormData, VendorEmail: '' }));\n  }\n};","map":{"version":3,"names":["handleVendorEmailChange","e","email","target","value","emailRegex","test","setFormData","prevFormData","VendorEmail","console","log"],"sources":["C:/React/my-app/my-app/src/Component/AddVender.js"],"sourcesContent":["const handleVendorEmailChange = (e) => {\r\n  const email = e.target.value;\r\n  const emailRegex = /^\\S+@\\S+\\.\\S+$/;\r\n  if (emailRegex.test(email) || email === '') {\r\n      // Valid email address or empty string, update state\r\n      setFormData(prevFormData => ({ ...prevFormData, VendorEmail: email }));\r\n  } else {\r\n      // Invalid email format, you might want to provide feedback to the user\r\n      console.log(\"Invalid email format\");\r\n      // Optionally, you can clear the email field or show an error message to the user\r\n      // setFormData(prevFormData => ({ ...prevFormData, VendorEmail: '' }));\r\n  }\r\n}\r\n"],"mappings":"AAAA,MAAMA,uBAAuB,GAAIC,CAAC,IAAK;EACrC,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;EAC5B,MAAMC,UAAU,GAAG,gBAAgB;EACnC,IAAIA,UAAU,CAACC,IAAI,CAACJ,KAAK,CAAC,IAAIA,KAAK,KAAK,EAAE,EAAE;IACxC;IACAK,WAAW,CAACC,YAAY,KAAK;MAAE,GAAGA,YAAY;MAAEC,WAAW,EAAEP;IAAM,CAAC,CAAC,CAAC;EAC1E,CAAC,MAAM;IACH;IACAQ,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC;IACA;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}